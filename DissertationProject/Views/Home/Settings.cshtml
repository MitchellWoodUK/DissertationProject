@using Microsoft.AspNetCore.Identity
@inject UserManager<CustomUserModel> UserManager
@model IEnumerable<FamilyMembersModel>
@{
    ViewData["Title"] = "Settings";
    CustomUserModel user = await UserManager.GetUserAsync(User);
}


<div class="container my-5">
    <div class="row">
        <h1 class="heading-text mb-0">Settings</h1>
        <p class="mb-3 pt-0 mt-0">@User.Identity?.Name</p>
        <div class="row">
            <!--Settings to change the users basic account details.-->
            <h5 class="subheading-text pt-4">Account</h5>
            <h6>Change all or specific account details:</h6>
            @if (TempData["Success"] != null)
            {
                <p class="alert alert-success" id="successMessage">@TempData["Success"]</p>
            }
            @if (TempData["Danger"] != null)
            {
                <p class="alert alert-danger" id="successMessage">@TempData["Danger"]</p>
            }
            <form method="post" class="my-3">
                <input type="hidden" name="userId" value="@user.Id" />
                <div class="mb-3">
                    <label for="fname" class="form-label">First Name</label>
                    <input type="text" class="form-control" id="fname" name="fname" placeholder="@user.Fname">
                </div>
                <div class="mb-3">
                    <label for="sname" class="form-label">Surname</label>
                    <input type="text" class="form-control" id="sname" name="sname" placeholder="@user.Sname">
                </div>
                <div class="mb-3">
                    <label for="job" class="form-label">Current Job</label>
                    <input type="text" class="form-control" id="jobName" name="jobName" placeholder="@user.JobName">
                </div>
                <div class="mb-3">
                    <label for="income" class="form-label">Income</label>
                    <input type="number" class="form-control" id="income" name="income" placeholder="@user.Income">
                </div>
                <button type="submit" asp-controller="Home" asp-action="UpdateUser" class="btn btn-success">Submit Changes</button>
            </form>
        </div>


        <div class="row">
            <!--Settings to change the users family settings-->
            <h5 class="subheading-text pt-4 mt-4">Family</h5>
            @{
                //Checks to see if the model is empty or not, if it is empty then allow the user to set up a family account.
                //If the list is not empty then show edit current family account.
                bool hasElements = !Model.Any();
                if (hasElements)
                {
                    <p>Create or Join an Existing Family Account</p>
                    <!--Needs a button to create a new family entry, and a button to join an existing family and set the role.-->
                    <!--Need to check if the user is already in a family or not and display different options if that is the case.-->

                    <div class="col mt-3">
                        <!--Create a new family-->
                        <p class="mb-5 text">Enter a unique username that can be used to link your families accounts together.</p>
                        <form method="post" class="my-3">
                            <div class="mb-3">
                                <label for="name" class="form-label">Family Name</label>
                                <input type="text" class="form-control" id="name" name="name">
                            </div>
                            <button type="submit" asp-controller="Home" asp-action="CreateFamily" class="btn btn-success w-100">Submit Changes</button>
                        </form>
                    </div>

                    <div class="col mt-3">
                        <!--Join an existing family-->
                        <p class="mb-5 text">Enter your families unqiue username to link your account to that family.</p>
                        <form method="post" class="my-3">
                            <div class="mb-3">
                                <label for="name" class="form-label">Family Name</label>
                                <input type="text" class="form-control" id="name" name="name">
                            </div>
                            <button type="submit" asp-controller="Home" asp-action="JoinFamily" class="btn btn-success w-100">Submit Changes</button>
                        </form>
                    </div>
                }
                else
                {
                <!--Need to add parts that show the users current linked family and information.-->
                @foreach(var family in Model)
                {
                    <h6 class="subheading-text">Current Family Details:</h6>
                    <form method="post" class="mt-3">
                        <!--Hidden values to hand back the necessary data back to the controller-->
                        <input type="hidden" name="id" value="@family.Id" />
                        <input type="hidden" name="family" value="@family.Family" />
                        <input type="hidden" name="familyMember" value="@family.FamilyMember" />

                        <p>Family Username: @family.Family.Name</p>


                        <button type="submit" asp-controller="Home" asp-action="UnlinkFamily" class="btn btn-danger mt-3">Unlink Family Account</button>
                    </form>
                }
            }
            }

        </div>


        <div class="row">
            <h5 class="subheading-text pt-4">Accessibility</h5>

        </div>
    </div>
</div>




<script>
    setTimeout(function () {
        var successMessage = document.getElementById('successMessage');
        if (successMessage != null) {
            successMessage.remove();
        }
    }, 5000);</script>
